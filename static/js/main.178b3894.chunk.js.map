{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getBubbleSortAnimations","array","animations","length","len","i","j","swap","bubbleSort","getCocktailSortAnimations","n","sorted","console","log","cocktailSort","getQuickSortAnimations","quickSort","left","right","index","pivot","Math","floor","partition","getSelectionSortAnimations","min","selectionSort","getBogoSortAnimations","isSorted","shuffle","count","random","sort","bogoSort","getMergeSortAnimations","auxiliaryArray","slice","mergeSort","mainArray","startIdx","endIdx","middleIdx","k","push","doMerge","tmp","ANIMATION_SPEED_MS","SortingVisualizer","props","state","this","resetArray","randomIntFromInterval","setState","a","b","reverse","play_animations","className","map","value","idx","key","style","backgroundColor","height","onClick","reversedArray","nearlySorted","cocktailShakerSort","React","Component","max","arrayBars","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.178b3894.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSort(array, animations);\n  return animations;\n}\n\nexport function getCocktailSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  cocktailSort(array, animations);\n  return animations;\n}\n\nexport function getQuickSortAnimations(array) {\n  const animations = [];\n  quickSort(array, animations, 0, array.length-1);\n  return animations;\n}\n\nexport function getSelectionSortAnimations(array) {\n  const animations = [];\n  selectionSort(array, animations);\n  return animations;\n}\n\nexport function getBogoSortAnimations(array) {\n  const animations = [];\n  bogoSort(array, animations);\n  return animations;\n}\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSort(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction swap(\n  i, j, array, animations\n) {\n  let tmp = array[i];\n  array[i] = array[j];\n  animations.push([i, array[j]]);\n  array[j] = tmp;\n  animations.push([j, tmp]);\nreturn [array, animations];\n}\n\nfunction selectionSort(array, animations) {\n  for (var i = 0; i < array.length; i++){\n    let min = i;\n    for(let j = i+1; j < array.length; j++){\n      swap(j, j, array, animations)\n      if(array[j] < array[min]) {\n        min = j;\n      }\n    }\n    swap(i, min, array, animations)\n  }\n}\n\nfunction bogoSort(array, animations) {\n  function isSorted (array){\n        for(var i = 1; i < array.length; i++){\n            if (array[i-1] > array[i]) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n  function shuffle(array, animations){\n        var count = array.length, index;\n        while(count > 0){\n            index = Math.floor(Math.random() * array.length);\n            count--;\n            [array, animations] = swap(count, index, array, animations)\n        }\n        return array;\n  }\n\n   function sort(array){\n        var sorted = false;\n        const max_tries = 500;\n        var count = 0;\n        while(!sorted && (count<max_tries)){\n            array = shuffle(array, animations);\n            sorted = isSorted(array);\n            count ++;\n        }\n        return array;\n    }\n\n    return sort(array);\n}\n\nfunction quickSort(array, animations, left, right) {\n  function partition(array, animations, left, right) {\n    var pivot = array[Math.floor((right + left) / 2)],\n      i = left, j = right;\n    while (i <= j) {\n      while (array[i] < pivot){\n        [array, animations] = swap(i, i, array, animations);\n        i++;\n      }\n      while (array[j] > pivot){\n        [array, animations] = swap(i, i, array, animations);\n        j--;\n      }\n      if (i <= j){\n        [array, animations] = swap(i, j, array, animations);\n        i++; j--;\n      }\n    }\n    return i;\n  }\n\n  var index;\n  if (array.length > 1) {\n    index = partition(array, animations, left, right)\n    if (left < index - 1) {\n      quickSort(array, animations, left, index-1)\n    }\n    if (right > index) {\n      quickSort(array, animations, index, right)\n    }\n  }\n}\n\nfunction cocktailSort(array, animations) {\n\n    let n = array.length;\n    let sorted = false;\n    console.log(n)\n\n    while (!sorted) {\n        sorted = true;\n        for (let i = 0; i < n - 1; i++) {\n            if (array[i] > array[i + 1]){\n              [array, animations] = swap(i, i+1, array, animations)\n               sorted = false;\n            }\n            else {\n              [array, animations] = swap(i, i, array, animations)\n            }\n\n   }\n\n   if (sorted)\n       break;\n   sorted = true;\n\n        for (let j = n - 1; j > 0; j--) {\n            if (array[j-1] > array[j]) {\n                [array, animations] = swap(j, j-1, array, animations)\n                sorted = false;\n            }\n            else {\n                [array, animations] = swap(j, j, array, animations)\n            }\n        }\n    }\n}\n\nfunction bubbleSort(\n  array,\n  animations,\n) {\n  let len = array.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len - 1 - i; j++) {\n      if (array[j] > array[j + 1]) {\n        [array, animations] = swap(j, j+1, array, animations)\n      }\n      else {\n        [array, animations] = swap(j, j, array, animations)\n      }\n    }\n  }\n}\n\nfunction mergeSort(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSort(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSort(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getCocktailSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getSelectionSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getBogoSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 0.1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 610;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(0, 360));\n    }\n    this.setState({array});\n  }\n\n  reversedArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(1, 359));\n    }\n    array.sort(function(a, b){return a - b});\n    array.reverse();\n    this.setState({array});\n  }\n\n  nearlySorted() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(1, 359));\n    }\n    array.sort(function(a, b){return a - b});\n    for (let k = 0; k < 10; k++) {\n      const i = randomIntFromInterval(0, NUMBER_OF_ARRAY_BARS)\n      const j = randomIntFromInterval(0, NUMBER_OF_ARRAY_BARS)\n      swap(i, j, array);\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    play_animations(animations);\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    play_animations(animations);\n  }\n\n  selectionSort() {\n    const animations = getSelectionSortAnimations(this.state.array);\n    play_animations(animations);\n  }\n\n  bogoSort() {\n    const animations = getBogoSortAnimations(this.state.array);\n    play_animations(animations);\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    play_animations(animations);\n  }\n\n  cocktailShakerSort() {\n    const animations = getCocktailSortAnimations(this.state.array);\n    play_animations(animations);\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: `hsl(${value}, 100%, 50%)`,\n              height: `500px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.reversedArray()}>New Reversed Array</button>\n        <button onClick={() => this.nearlySorted()}>Generate New Nearly Sorted Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.selectionSort()}>Selection Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.cocktailShakerSort()}>Cocktail Shaker Sort</button>\n        <button onClick={() => this.bogoSort()}>Bogo Sort</button>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n\nfunction play_animations (animations) {\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.backgroundColor = `hsl(${newHeight}, 100%, 50%)`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n}\n\nfunction swap(i, j, array) {\n  let tmp = array[i];\n  array[i] = array[j];\n  array[j] = tmp;\nreturn array;\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}