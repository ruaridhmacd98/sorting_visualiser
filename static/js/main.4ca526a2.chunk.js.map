{"version":3,"sources":["sortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["getBubbleSortAnimations","array","animations","length","len","i","j","swap","bubbleSortHelper","getCocktailSortAnimations","n","sorted","console","log","cocktailSortHelper","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","push","doMerge","tmp","SortingVisualizer","props","state","this","resetArray","min","max","random","setState","arrayBars","document","getElementsByClassName","setTimeout","barOneIdx","newHeight","style","backgroundColor","barOneStyle","className","map","value","idx","key","height","onClick","mergeSort","quickSort","heapSort","bubbleSort","cocktailShakerSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4ca526a2.chunk.js","sourcesContent":["export function getBubbleSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  bubbleSortHelper(array, animations);\n  return animations;\n}\n\nexport function getCocktailSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  cocktailSortHelper(array, animations);\n  return animations;\n}\n\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction swap(\n  i, j, array, animations\n) {\n  let tmp = array[i];\n  array[i] = array[j];\n  animations.push([i, array[j]]);\n  array[j] = tmp;\n  animations.push([j, tmp]);\nreturn [array, animations];\n}\n\nfunction cocktailSortHelper(array, animations) {\n\n    let n = array.length;\n    let sorted = false;\n    console.log(n)\n\n    while (!sorted) {\n        sorted = true;\n        for (let i = 0; i < n - 1; i++) {\n            if (array[i] > array[i + 1]){\n\t\t[array, animations] = swap(i, i+1, array, animations)\n               sorted = false;\n            }\n   }\n\n   if (sorted)\n       break;\n   sorted = true;\n\n        for (let j = n - 1; j > 0; j--) {\n            if (array[j-1] > array[j]) {\n\t\t[array, animations] = swap(j, j+1, array, animations)\n                sorted = false;\n            }\n        }\n    }\n}\n\nfunction bubbleSortHelper(\n  array,\n  animations,\n) {\n  let len = array.length;\n  for (let i = 0; i < len; i++) {\n    for (let j = 0; j < len - 1 - i; j++) {\n      if (array[j] > array[j + 1]) {\n\t[array, animations] = swap(j, j+1, array, animations)\n      }\n    }\n  }\n}\n\nfunction mergeSortHelper(\n  mainArray,\n  startIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(\n  mainArray,\n  startIdx,\n  middleIdx,\n  endIdx,\n  auxiliaryArray,\n  animations,\n) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n  while (i <= middleIdx && j <= endIdx) {\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  while (i <= middleIdx) {\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n  while (j <= endIdx) {\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}\n","import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport {getCocktailSortAnimations} from '../sortingAlgorithms/sortingAlgorithms.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 1;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 310;\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(0, 360));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.backgroundColor = `hsl(${newHeight}, 100%, 50%)`;\n        }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  quickSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  heapSort() {\n    // We leave it as an exercise to the viewer of this code to implement this method.\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = `hsl(${newHeight}, 100%, 50%)`;\n        }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  cocktailShakerSort() {\n    const animations = getCocktailSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n        const [barOneIdx, newHeight] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = `hsl(${newHeight}, 100%, 50%)`;\n        }, i * ANIMATION_SPEED_MS);\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: `hsl(${value}, 100%, 50%)`,\n              height: `500px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.heapSort()}>Heap Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.cocktailShakerSort()}>Cocktail Shaker Sort</button>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}